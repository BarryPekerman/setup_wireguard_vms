---
- name: Configure WireGuard VPN
  hosts: wireguard
  become: yes
  vars:
    wireguard_interface: wg0
    wireguard_port: 51820
    wireguard_network: "10.0.3.0/24"
    server_ip: "10.0.3.1"
    client_ip: "10.0.3.2"

  tasks:
    - name: Update system packages
      apt:
        update_cache: yes
        upgrade: dist
      when: ansible_os_family == "Debian"
      retries: 5
      delay: 5
      register: apt_result
      until: apt_result is succeeded

    # SSH Hardening
    - name: Create SSH banner
      template:
        src: ../templates/ssh_banner.j2
        dest: /etc/ssh/banner
        owner: root
        group: root
        mode: '0644'
      tags: ssh

    - name: Configure SSH hardening
      template:
        src: ../templates/sshd_config.j2
        dest: /etc/ssh/sshd_config
        owner: root
        group: root
        mode: '0644'
        backup: yes
      tags: ssh

    - name: Restart SSH service
      systemd:
        name: ssh
        state: restarted
        enabled: yes
      tags: ssh

    - name: Install WireGuard
      package:
        name: wireguard
        state: present

    - name: Install additional packages
      package:
        name:
          - iptables
          - fail2ban
          - ufw
        state: present

    - name: Enable IP forwarding
      sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        state: present
        reload: yes

    - name: Create WireGuard directory
      file:
        path: /etc/wireguard
        state: directory
        mode: '0700'

    - name: Generate WireGuard keys
      shell: |
        if [ ! -f /etc/wireguard/{{ wireguard_interface }}_private_key ]; then
          wg genkey | tee /etc/wireguard/{{ wireguard_interface }}_private_key | wg pubkey > /etc/wireguard/{{ wireguard_interface }}_public_key
        fi
      args:
        creates: /etc/wireguard/{{ wireguard_interface }}_private_key

    - name: Set proper permissions on keys
      file:
        path: "{{ item }}"
        mode: '0600'
      loop:
        - /etc/wireguard/{{ wireguard_interface }}_private_key
        - /etc/wireguard/{{ wireguard_interface }}_public_key

    - name: Get server public key
      slurp:
        src: /etc/wireguard/{{ wireguard_interface }}_public_key
      register: server_public_key
      when: inventory_hostname == 'bastion'

    - name: Get client public key
      slurp:
        src: /etc/wireguard/{{ wireguard_interface }}_public_key
      register: client_public_key
      when: inventory_hostname == 'private'

    - name: Display keys for verification (server)
      debug:
        msg: "Server Public Key: {{ server_public_key.content | b64decode | trim }}"
      when: inventory_hostname in ['bastion','bastion_group'] and (server_public_key is defined and server_public_key.content is defined)

- name: Configure WireGuard Server (Bastion)
  hosts: bastion_group
  become: yes
  vars:
    wireguard_interface: wg0
    wireguard_port: 51820
    server_ip: "10.0.3.1"
    client_ip: "10.0.3.2"

  tasks:
    - name: Get server private key
      slurp:
        src: /etc/wireguard/{{ wireguard_interface }}_private_key
      register: server_private_key_data

    - name: Get client public key from private instance
      slurp:
        src: /etc/wireguard/{{ wireguard_interface }}_public_key
      delegate_to: private
      register: client_public_key_data

    - name: Set decoded keys as facts
      set_fact:
        server_private_key: "{{ server_private_key_data.content | b64decode | trim }}"
        client_public_key: "{{ client_public_key_data.content | b64decode | trim }}"

    - name: Create WireGuard server configuration
      template:
        src: ../templates/server.conf.j2
        dest: /etc/wireguard/{{ wireguard_interface }}.conf
        mode: '0600'

    - name: Start and enable WireGuard
      systemd:
        name: "wg-quick@{{ wireguard_interface }}"
        state: started
        enabled: yes

    - name: Configure UFW firewall
      ufw:
        rule: allow
        port: "{{ wireguard_port }}"
        proto: udp
        state: enabled

    - name: Enable UFW
      ufw:
        state: enabled
        policy: deny
        direction: incoming

    - name: Allow SSH through UFW
      ufw:
        rule: allow
        port: "22"
        proto: tcp

    - name: Configure fail2ban
      template:
        src: ../templates/fail2ban.conf.j2
        dest: /etc/fail2ban/jail.local
        mode: '0644'

    - name: Start and enable fail2ban
      systemd:
        name: fail2ban
        state: started
        enabled: yes

- name: Configure WireGuard Client (Private Instance)
  hosts: private_group
  become: yes
  vars:
    wireguard_interface: wg0
    wireguard_port: 51820
    server_ip: "10.0.3.1"
    client_ip: "10.0.3.2"

  tasks:
    - name: Get client private key
      slurp:
        src: /etc/wireguard/{{ wireguard_interface }}_private_key
      register: client_private_key_data

    - name: Get server public key from bastion
      slurp:
        src: /etc/wireguard/{{ wireguard_interface }}_public_key
      delegate_to: bastion
      register: server_public_key_data

    - name: Set decoded keys as facts
      set_fact:
        client_private_key: "{{ client_private_key_data.content | b64decode | trim }}"
        server_public_key: "{{ server_public_key_data.content | b64decode | trim }}"
        server_endpoint: "{{ hostvars['bastion']['ansible_host'] }}:{{ wireguard_port }}"

    - name: Create WireGuard client configuration
      template:
        src: ../templates/client.conf.j2
        dest: /etc/wireguard/{{ wireguard_interface }}.conf
        mode: '0600'

    - name: Start and enable WireGuard
      systemd:
        name: "wg-quick@{{ wireguard_interface }}"
        state: started
        enabled: yes

    - name: Configure fail2ban
      template:
        src: ../templates/fail2ban.conf.j2
        dest: /etc/fail2ban/jail.local
        mode: '0644'

    - name: Start and enable fail2ban
      systemd:
        name: fail2ban
        state: started
        enabled: yes

- name: Test WireGuard Connection
  hosts: all
  become: yes
  tasks:
    - name: Wait for WireGuard to be ready
      wait_for:
        port: "{{ wireguard_port }}"
        protocol: udp
        timeout: 30

    - name: Test connectivity between instances
      ping:
        data: "WireGuard test from {{ inventory_hostname }}"
      delegate_to: "{{ hostvars['private']['ansible_host'] }}"
      when: inventory_hostname == 'bastion'

    - name: Show WireGuard status
      command: wg show
      register: wg_status
      changed_when: false

    - name: Display WireGuard status
      debug:
        var: wg_status.stdout_lines

    - name: Test network connectivity
      shell: |
        ping -c 3 {{ server_ip if inventory_hostname == 'private' else client_ip }}
      register: ping_result
      changed_when: false

    - name: Display connectivity test results
      debug:
        msg: "{{ ping_result.stdout_lines }}"
